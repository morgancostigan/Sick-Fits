{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n    //tells Apollo we will deal with this\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      //Apollo asks read function for allProducts\n      console.log({\n        existing: existing,\n        args: args,\n        cache: cache\n      });\n      var skip = args.skip,\n          first = args.first; //read # of items on page from cache\n\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      var count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      var page = skip / first + 1;\n      var pages = Math.ceil(count / first); // check if there are existing items in cache\n\n      var items = existing.slice(skip); //we can do 1 of 2 things...\n      // 1. return the items that are already in cache\n      // or 2. return 'false' triggering a network request for the items\n    },\n    merge: function merge() {// this runs when Apollo brings data back from the network request\n    }\n  };\n}\n;","map":{"version":3,"sources":["/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","console","log","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","merge"],"mappings":"AAAA,SAAQA,gBAAR,QAA+B,0BAA/B;AAEA,eAAe,SAASC,eAAT,GAA2B;AACtC,SAAO;AACHC,IAAAA,OAAO,EAAE,KADN;AACa;AAChBC,IAAAA,IAFG,kBAEiC;AAAA;;AAAA,UAA/BC,QAA+B,uEAArB,EAAqB;;AAAA;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;;AAChC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAACJ,QAAAA,QAAQ,EAARA,QAAD;AAAWC,QAAAA,IAAI,EAAJA,IAAX;AAAiBC,QAAAA,KAAK,EAALA;AAAjB,OAAZ;AAFgC,UAGxBG,IAHwB,GAGRJ,IAHQ,CAGxBI,IAHwB;AAAA,UAGlBC,KAHkB,GAGRL,IAHQ,CAGlBK,KAHkB,EAIhC;;AACA,UAAMC,IAAI,GAAGL,KAAK,CAACM,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEb;AAAT,OAAhB,CAAb;AACA,UAAMc,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CARgC,CAShC;;AACA,UAAMU,KAAK,GAAGhB,QAAQ,CAACiB,KAAT,CAAeZ,IAAf,CAAd,CAVgC,CAahC;AACA;AACA;AACH,KAlBE;AAmBHa,IAAAA,KAnBG,mBAmBK,CACJ;AAEH;AAtBE,GAAP;AAwBH;AAAA","sourcesContent":["import {PAGINATION_QUERY} from '../components/Pagination';\n\nexport default function paginationField() {\n    return {\n        keyArgs: false, //tells Apollo we will deal with this\n        read(existing =[], { args, cache }) {\n            //Apollo asks read function for allProducts\n            console.log({existing, args, cache});\n            const { skip, first } = args;\n            //read # of items on page from cache\n            const data = cache.readQuery({ query: PAGINATION_QUERY });\n            const count = data?._allProductsMeta?.count;\n            const page = skip / first + 1;\n            const pages = Math.ceil(count / first);\n            // check if there are existing items in cache\n            const items = existing.slice(skip, )\n            \n\n            //we can do 1 of 2 things...\n            // 1. return the items that are already in cache\n            // or 2. return 'false' triggering a network request for the items\n        },\n        merge() {\n            // this runs when Apollo brings data back from the network request\n\n        }\n    };\n};"]},"metadata":{},"sourceType":"module"}