{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/components/SignIn.js\";\nimport Form from './styles/Form';\nimport useForm from \"../lib/useForm\";\nimport { useMutation, useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\nconst SIGN_IN_MUTATION = gql`\n    mutation SIGN_IN_MUTATION(email: String!, password: String!) {\n        ... on UserAuthenticationWithPasswordSuccess {\n            item {\n                id\n                name\n                email\n            }\n        }\n    }\n`;\nexport default function SignIn() {\n  const {\n    inputs,\n    handleChange,\n    clearForm,\n    resetForm\n  } = useForm({\n    email: '',\n    password: ''\n  });\n  const [signIn, {\n    loading,\n    error\n  }] = useMutation(SIGN_IN_MUTATION, {\n    variables: inputs,\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  });\n\n  async function handleSubmit(e) {\n    e.preventDefault(); //stop form from submitting early\n    //send email and password to graphQL API\n    //const res for logging only\n\n    const res = await signin();\n    console.log({\n      res\n    });\n  }\n\n  ;\n  return (\n    /*#__PURE__*/\n    //method POST to prevent password from showing in URL, history, and logs\n    _jsxDEV(Form, {\n      method: \"post\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Go Ahead And Sign On In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: [\"Email\", /*#__PURE__*/_jsxDEV(\"input\", {\n            required: true,\n            type: \"email\",\n            id: \"email\",\n            name: \"email\",\n            placeholder: \"Please Enter Your Email\",\n            autoComplete: \"email\",\n            value: inputs.email,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: [\"Password\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\",\n            name: \"password\",\n            placeholder: \"..And Your Password\",\n            autoComplete: \"password\",\n            value: inputs.password,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Sign In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)\n  );\n}\n;","map":{"version":3,"sources":["/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/components/SignIn.js"],"names":["Form","useForm","useMutation","useQuery","gql","CURRENT_USER_QUERY","SIGN_IN_MUTATION","SignIn","inputs","handleChange","clearForm","resetForm","email","password","signIn","loading","error","variables","refetchQueries","query","handleSubmit","e","preventDefault","res","signin","console","log"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,eAAjB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,gBAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,kBAAT,QAAmC,QAAnC;AAEA,MAAMC,gBAAgB,GAAGF,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;AAaA,eAAe,SAASG,MAAT,GAAkB;AAE7B,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,YAAV;AAAwBC,IAAAA,SAAxB;AAAmCC,IAAAA;AAAnC,MAAiDV,OAAO,CAAC;AAC3DW,IAAAA,KAAK,EAAE,EADoD;AAE3DC,IAAAA,QAAQ,EAAE;AAFiD,GAAD,CAA9D;AAIA,QAAM,CAACC,MAAD,EAAS;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAT,IAA+Bd,WAAW,CAACI,gBAAD,EAAmB;AAC/DW,IAAAA,SAAS,EAAET,MADoD;AAE/DU,IAAAA,cAAc,EAAE,CAAC;AAACC,MAAAA,KAAK,EAAEd;AAAR,KAAD;AAF+C,GAAnB,CAAhD;;AAKA,iBAAee,YAAf,CAA4BC,CAA5B,EAA8B;AAC1BA,IAAAA,CAAC,CAACC,cAAF,GAD0B,CACN;AACpB;AACA;;AACA,UAAMC,GAAG,GAAG,MAAMC,MAAM,EAAxB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACH,MAAAA;AAAD,KAAZ;AAEH;;AAAA;AAED;AAAA;AACI;AACA,YAAC,IAAD;AAAM,MAAA,MAAM,EAAC,MAAb;AAAoB,MAAA,QAAQ,EAAEH,YAA9B;AAAA,8BAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAII;AAAA,gCAEI;AAAO,UAAA,OAAO,EAAC,OAAf;AAAA,2CAEI;AACI,YAAA,QAAQ,MADZ;AAEI,YAAA,IAAI,EAAC,OAFT;AAGI,YAAA,EAAE,EAAC,OAHP;AAII,YAAA,IAAI,EAAC,OAJT;AAKI,YAAA,WAAW,EAAC,yBALhB;AAMI,YAAA,YAAY,EAAC,OANjB;AAOI,YAAA,KAAK,EAAEZ,MAAM,CAACI,KAPlB;AAQI,YAAA,QAAQ,EAAEH;AARd;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAeI;AAAO,UAAA,OAAO,EAAC,UAAf;AAAA,8CAEI;AACI,YAAA,IAAI,EAAC,UADT;AAEI,YAAA,EAAE,EAAC,UAFP;AAGI,YAAA,IAAI,EAAC,UAHT;AAII,YAAA,WAAW,EAAC,qBAJhB;AAKI,YAAA,YAAY,EAAC,UALjB;AAMI,YAAA,KAAK,EAAED,MAAM,CAACK,QANlB;AAOI,YAAA,QAAQ,EAAEJ;AAPd;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAfJ,eA2BI;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA3BJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AA+CH;AAAA","sourcesContent":["import Form from './styles/Form';\nimport useForm from \"../lib/useForm\";\nimport { useMutation, useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\n\nconst SIGN_IN_MUTATION = gql`\n    mutation SIGN_IN_MUTATION(email: String!, password: String!) {\n        ... on UserAuthenticationWithPasswordSuccess {\n            item {\n                id\n                name\n                email\n            }\n        }\n    }\n`;\n\n\nexport default function SignIn() {\n\n    const { inputs, handleChange, clearForm, resetForm } = useForm({\n        email: '',\n        password: '',\n    });\n    const [signIn, { loading, error }] = useMutation(SIGN_IN_MUTATION, {\n        variables: inputs,\n        refetchQueries: [{query: CURRENT_USER_QUERY}]\n    });\n\n    async function handleSubmit(e){\n        e.preventDefault(); //stop form from submitting early\n        //send email and password to graphQL API\n        //const res for logging only\n        const res = await signin()\n        console.log({res});\n        \n    };\n\n    return (\n        //method POST to prevent password from showing in URL, history, and logs\n        <Form method=\"post\" onSubmit={handleSubmit}>\n            {/* <DisplayError error={error} /> */}\n            <h2>Go Ahead And Sign On In</h2>\n            {/* <fieldset disabled={loading} aria-busy={loading}> */}\n            <fieldset>\n\n                <label htmlFor=\"email\">\n                    Email\n                    <input\n                        required\n                        type=\"email\"\n                        id=\"email\"\n                        name=\"email\"\n                        placeholder=\"Please Enter Your Email\"\n                        autoComplete=\"email\"\n                        value={inputs.email}\n                        onChange={handleChange}\n                    />\n                </label>\n                <label htmlFor=\"password\">\n                    Password\n                    <input\n                        type=\"password\"\n                        id=\"password\"\n                        name=\"password\"\n                        placeholder=\"..And Your Password\"\n                        autoComplete=\"password\"\n                        value={inputs.password}\n                        onChange={handleChange}\n                    />\n                </label>\n                <button type=\"submit\">Sign In</button>\n            </fieldset>\n\n            {/* //EXAMPLE methods */}\n            {/* <button type='button' onClick={clearForm}>\n                Clear Form\n            </button>\n            <button type='button' onClick={resetForm}>\n                Reset Form\n            </button> */}\n\n        </Form>\n    )\n    \n};"]},"metadata":{},"sourceType":"module"}