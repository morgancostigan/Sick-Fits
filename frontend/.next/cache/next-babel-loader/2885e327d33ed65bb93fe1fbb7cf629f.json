{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    //tells Apollo we will deal with this\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$_allProductsMet;\n\n      //Apollo asks read function for allProducts\n      console.log({\n        existing,\n        args,\n        cache\n      });\n      const {\n        skip,\n        first\n      } = args; //read # of items on page from cache\n\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      const count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first); // check if there are existing items in cache, and filter out undefined items\n\n      const items = existing.slice(skip, skip + first).filter(x => x); //if no items...\n\n      if (items.length !== first) {// fetch items from network\n      } //we can do 1 of 2 things...\n      // 1. return the items that are already in cache\n      // or 2. return 'false' triggering a network request for the items\n\n    },\n\n    merge() {// this runs when Apollo brings data back from the network request\n    }\n\n  };\n}\n;","map":{"version":3,"sources":["/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","console","log","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge"],"mappings":"AAAA,SAAQA,gBAAR,QAA+B,0BAA/B;AAEA,eAAe,SAASC,eAAT,GAA2B;AACtC,SAAO;AACHC,IAAAA,OAAO,EAAE,KADN;;AACa;AAChBC,IAAAA,IAAI,CAACC,QAAQ,GAAE,EAAX,EAAe;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAf,EAAgC;AAAA;;AAChC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAACJ,QAAAA,QAAD;AAAWC,QAAAA,IAAX;AAAiBC,QAAAA;AAAjB,OAAZ;AACA,YAAM;AAAEG,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBL,IAAxB,CAHgC,CAIhC;;AACA,YAAMM,IAAI,GAAGL,KAAK,CAACM,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEb;AAAT,OAAhB,CAAb;AACA,YAAMc,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,YAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,YAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CARgC,CAShC;;AACA,YAAMU,KAAK,GAAGhB,QAAQ,CAACiB,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA2CC,CAAD,IAAOA,CAAjD,CAAd,CAVgC,CAWhC;;AACA,UAAGH,KAAK,CAACI,MAAN,KAAiBd,KAApB,EAA2B,CACvB;AAEH,OAf+B,CAkBhC;AACA;AACA;;AACH,KAvBE;;AAwBHe,IAAAA,KAAK,GAAG,CACJ;AAEH;;AA3BE,GAAP;AA6BH;AAAA","sourcesContent":["import {PAGINATION_QUERY} from '../components/Pagination';\n\nexport default function paginationField() {\n    return {\n        keyArgs: false, //tells Apollo we will deal with this\n        read(existing =[], { args, cache }) {\n            //Apollo asks read function for allProducts\n            console.log({existing, args, cache});\n            const { skip, first } = args;\n            //read # of items on page from cache\n            const data = cache.readQuery({ query: PAGINATION_QUERY });\n            const count = data?._allProductsMeta?.count;\n            const page = skip / first + 1;\n            const pages = Math.ceil(count / first);\n            // check if there are existing items in cache, and filter out undefined items\n            const items = existing.slice(skip, skip + first).filter((x) => x);\n            //if no items...\n            if(items.length !== first) {\n                // fetch items from network\n                \n            }\n            \n\n            //we can do 1 of 2 things...\n            // 1. return the items that are already in cache\n            // or 2. return 'false' triggering a network request for the items\n        },\n        merge() {\n            // this runs when Apollo brings data back from the network request\n\n        }\n    };\n};"]},"metadata":{},"sourceType":"module"}