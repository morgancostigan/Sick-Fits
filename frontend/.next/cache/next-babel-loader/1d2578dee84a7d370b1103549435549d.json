{"ast":null,"code":"import _slicedToArray from \"/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from \"react\";\nexport default function useForm() {\n  _s();\n\n  var initial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  //create a state object for our inputs\n  var _useState = useState(initial),\n      inputs = _useState[0],\n      setInputs = _useState[1];\n\n  function handleChange(e) {\n    var _e$target = e.target,\n        value = _e$target.value,\n        name = _e$target.name,\n        type = _e$target.type;\n\n    if (type === 'number') {\n      value = parseInt(value);\n    } //vvv this is for file uploads vvv\n\n\n    if (type === 'file') {\n      value[0] = e.target.files;\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, _defineProperty({}, name, value)));\n  }\n\n  ;\n\n  function resetForm() {\n    setInputs(initial);\n  }\n\n  function clearForm() {\n    var blankState = Object.fromEntries(Object.entries(inputs).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      return [key, ''];\n    }));\n  } //return the things we want surfaced \n\n\n  return {\n    inputs: inputs,\n    handleChange: handleChange,\n    resetForm: resetForm,\n    clearForm: clearForm\n  };\n}\n\n_s(useForm, \"0tjT+aoDVbAe0wsQZsq9AKLCE20=\");\n\n;","map":{"version":3,"sources":["/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/lib/useForm.js"],"names":["useState","useForm","initial","inputs","setInputs","handleChange","e","target","value","name","type","parseInt","files","resetForm","clearForm","blankState","Object","fromEntries","entries","map","key"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,OAAT,GAA+B;AAAA;;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAC1C;AAD0C,kBAEdF,QAAQ,CAACE,OAAD,CAFM;AAAA,MAEnCC,MAFmC;AAAA,MAE3BC,SAF2B;;AAI1C,WAASC,YAAT,CAAsBC,CAAtB,EAAyB;AAAA,oBACOA,CAAC,CAACC,MADT;AAAA,QACfC,KADe,aACfA,KADe;AAAA,QACRC,IADQ,aACRA,IADQ;AAAA,QACFC,IADE,aACFA,IADE;;AAErB,QAAGA,IAAI,KAAK,QAAZ,EAAqB;AACjBF,MAAAA,KAAK,GAAGG,QAAQ,CAACH,KAAD,CAAhB;AACH,KAJoB,CAKrB;;;AACA,QAAGE,IAAI,KAAK,MAAZ,EAAmB;AACfF,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWF,CAAC,CAACC,MAAF,CAASK,KAApB;AACH;;AACDR,IAAAA,SAAS,iCAEFD,MAFE,2BAGJM,IAHI,EAGGD,KAHH,GAAT;AAKH;;AAAA;;AAED,WAASK,SAAT,GAAoB;AAChBT,IAAAA,SAAS,CAACF,OAAD,CAAT;AACH;;AAED,WAASY,SAAT,GAAqB;AACjB,QAAMC,UAAU,GAAGC,MAAM,CAACC,WAAP,CAAmBD,MAAM,CAACE,OAAP,CAAef,MAAf,EACrCgB,GADqC,CACjC;AAAA;AAAA,UAAEC,GAAF;AAAA,UAAOZ,KAAP;;AAAA,aAAkB,CAACY,GAAD,EAAM,EAAN,CAAlB;AAAA,KADiC,CAAnB,CAAnB;AAEH,GA3ByC,CA6B1C;;;AACA,SAAO;AACHjB,IAAAA,MAAM,EAANA,MADG;AAEHE,IAAAA,YAAY,EAAZA,YAFG;AAGHQ,IAAAA,SAAS,EAATA,SAHG;AAIHC,IAAAA,SAAS,EAATA;AAJG,GAAP;AAOH;;GArCuBb,O;;AAqCvB","sourcesContent":["import { useState } from \"react\";\n\nexport default function useForm(initial = {}) {\n    //create a state object for our inputs\n    const [inputs, setInputs] = useState(initial);\n\n    function handleChange(e) {\n        let { value, name, type } = e.target;\n        if(type === 'number'){\n            value = parseInt(value);\n        }\n        //vvv this is for file uploads vvv\n        if(type === 'file'){\n            value[0] = e.target.files;\n        }\n        setInputs({\n            //copy existing state\n            ...inputs,\n            [name]: value,\n        });\n    };\n\n    function resetForm(){\n        setInputs(initial)\n    }\n\n    function clearForm() {\n        const blankState = Object.fromEntries(Object.entries(inputs)\n        .map(([key, value]) => [key, '']))\n    }\n\n    //return the things we want surfaced \n    return {\n        inputs,\n        handleChange,\n        resetForm,\n        clearForm,\n    };\n\n};\n"]},"metadata":{},"sourceType":"module"}