{"ast":null,"code":"import _slicedToArray from \"/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/components/UpdateProduct.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UPDATE_PRODUCT_MUTATION(\\n        $id: ID!\\n        $name: String\\n        $description: String\\n        $price: Int\\n    ) {\\n        updateProduct (\\n            id: $id,\\n            data: {\\n                id: $id,\\n                name: $name,\\n                description: $description,\\n                price: $price,\\n            }\\n        ) {\\n            id\\n            name\\n            description\\n            price\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query SINGLE_ITEM_QUERY($id: ID!) {\\n        Product (where: {\\n            id: $id\\n        }) \\n        {\\n            id\\n            name\\n            price\\n            description\\n            photo {\\n                id\\n                altText\\n                image {\\n                    publicUrlTransformed\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nvar SINGLE_ITEM_QUERY = gql(_templateObject());\nvar UPDATE_PRODUCT_MUTATION = gql(_templateObject2());\nexport default function UpdateProduct(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  //TODO\n  //get existing product\n  var _useQuery = useQuery(SINGLE_ITEM_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  console.log({\n    data: data\n  }); //mutation to update, including renaming res variables to not conflict with above\n\n  var _useMutation = useMutation(UPDATE_PRODUCT_MUTATION, {\n    variables: {\n      id: id\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateProduct = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      updateData = _useMutation2$.data,\n      updateError = _useMutation2$.error,\n      updateLoading = _useMutation2$.loading; //form to handle updates\n\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Update \", id]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 12\n  }, this);\n}\n\n_s(UpdateProduct, \"f1yWKvIEXovp2CPYEfjSlhDSK4o=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c = UpdateProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateProduct\");","map":{"version":3,"sources":["/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/components/UpdateProduct.js"],"names":["useMutation","useQuery","gql","SINGLE_ITEM_QUERY","UPDATE_PRODUCT_MUTATION","UpdateProduct","id","variables","data","error","loading","console","log","updateProduct","updateData","updateError","updateLoading"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,gBAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,iBAAiB,GAAGD,GAAH,mBAAvB;AAqBA,IAAME,uBAAuB,GAAGF,GAAH,oBAA7B;AAyBA,eAAe,SAASG,aAAT,OAA6B;AAAA;;AAAA,MAALC,EAAK,QAALA,EAAK;;AAExC;AACA;AAHwC,kBAIPL,QAAQ,CAACE,iBAAD,EAAoB;AACzDI,IAAAA,SAAS,EAAE;AAACD,MAAAA,EAAE,EAAFA;AAAD;AAD8C,GAApB,CAJD;AAAA,MAIhCE,IAJgC,aAIhCA,IAJgC;AAAA,MAI1BC,KAJ0B,aAI1BA,KAJ0B;AAAA,MAInBC,OAJmB,aAInBA,OAJmB;;AAOxCC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACJ,IAAAA,IAAI,EAAJA;AAAD,GAAZ,EAPwC,CASxC;;AATwC,qBAcpCR,WAAW,CAACI,uBAAD,EAA0B;AACjCG,IAAAA,SAAS,EAAE;AACPD,MAAAA,EAAE,EAAEA;AADG;AADsB,GAA1B,CAdyB;AAAA;AAAA,MAUjCO,aAViC;AAAA;AAAA,MAW9BC,UAX8B,kBAWpCN,IAXoC;AAAA,MAY7BO,WAZ6B,kBAYpCN,KAZoC;AAAA,MAa3BO,aAb2B,kBAapCN,OAboC,EAmBxC;;;AAEA,sBAAO;AAAA,0BAAWJ,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;GAtBuBD,a;UAIaJ,Q,EAU7BD,W;;;KAdgBK,a","sourcesContent":["import { useMutation, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\nconst SINGLE_ITEM_QUERY = gql`\n    query SINGLE_ITEM_QUERY($id: ID!) {\n        Product (where: {\n            id: $id\n        }) \n        {\n            id\n            name\n            price\n            description\n            photo {\n                id\n                altText\n                image {\n                    publicUrlTransformed\n                }\n            }\n        }\n    }\n`;\n\nconst UPDATE_PRODUCT_MUTATION = gql`\n    mutation UPDATE_PRODUCT_MUTATION(\n        $id: ID!\n        $name: String\n        $description: String\n        $price: Int\n    ) {\n        updateProduct (\n            id: $id,\n            data: {\n                id: $id,\n                name: $name,\n                description: $description,\n                price: $price,\n            }\n        ) {\n            id\n            name\n            description\n            price\n        }\n    }\n`;\n \n\nexport default function UpdateProduct({id}) {\n\n    //TODO\n    //get existing product\n    const { data, error, loading } = useQuery(SINGLE_ITEM_QUERY, {\n        variables: {id},\n    });\n    console.log({data});\n    \n    //mutation to update, including renaming res variables to not conflict with above\n    const [updateProduct, { \n        data: updateData, \n        error: updateError, \n        loading: updateLoading }] = \n        useMutation(UPDATE_PRODUCT_MUTATION, {\n            variables: {\n                id: id\n            }\n        })\n    //form to handle updates\n\n    return <p>Update {id}</p>;\n}"]},"metadata":{},"sourceType":"module"}