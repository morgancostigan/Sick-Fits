{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    // tells apollo we will take care of everything\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$_allProductsMet;\n\n      // console.log({ existing, args, cache });\n      const {\n        skip,\n        first\n      } = args; // Read the number of items on the page from the cache\n\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      const count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first); // Check if we have existing items\n\n      const items = existing.slice(skip, skip + first).filter(x => x); // If\n      // There are items\n      // AND there aren't enough items to satisfy how many were requested\n      // AND we are on the last page\n      // THEN JUST SEND IT\n\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n\n      if (items.length !== first) {\n        // We don't have any items, we must go to the network to fetch them\n        return false;\n      } // If there are items, just reutrn them from the cache, and we don't need to go to the network\n\n\n      if (items.length) {\n        // console.log(\n        //   `There are ${items.length} items in the cache! Gonna send them to apollo`\n        // );\n        return items;\n      }\n\n      return false; // fallback to network\n      // First thing it does it asks the read function for those items.\n      // We can either do one of two things:\n      // First things we can do is return the items because they are already in the cache\n      // The other thing we can do is to return false from here, (network request)\n    },\n\n    merge(existing, incoming, {\n      args\n    }) {\n      //grab skip and first values\n      const {\n        skip,\n        first\n      } = args; // this runs when Apollo brings data back from the network request\n\n      console.log(`merging items from network ${incoming.length}`); // console.log({incoming});\n      //if anything in the cache, merged is the existing, otherwise it's an empty array\n\n      const merged = existing ? existing.slice(0) : []; //leave room for previous items, in case we are linked to a later page and the previous entries aren't in the cache\n\n      for (let i = skip; i > skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n\n      ;\n      console.log({\n        merged\n      }); //return merged itemd from cache, which automatically refires read fucntion\n\n      return merged;\n    }\n\n  };\n}\n;","map":{"version":3,"sources":["/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge","incoming","console","log","merged","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACtC,SAAO;AACHC,IAAAA,OAAO,EAAE,KADN;;AACa;AAChBC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB,EAAiC;AAAA;;AACjC;AACA,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAxB,CAFiC,CAIjC;;AACA,YAAMI,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AACA,YAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,YAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,YAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CARiC,CAUjC;;AACA,YAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA2CC,CAAD,IAAOA,CAAjD,CAAd,CAXiC,CAYjC;AACA;AACA;AACA;AACA;;AAEA,UAAIH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBd,KAAjC,IAA0CM,IAAI,KAAKC,KAAvD,EAA8D;AAC1D,eAAOG,KAAP;AACH;;AACD,UAAIA,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AACxB;AACA,eAAO,KAAP;AACH,OAxBgC,CA0BjC;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB;AACd;AACA;AACA;AACA,eAAOJ,KAAP;AACH;;AAED,aAAO,KAAP,CAlCiC,CAkCnB;AAEd;AACA;AACA;AACA;AACH,KA1CE;;AA2CHK,IAAAA,KAAK,CAACnB,QAAD,EAAWoB,QAAX,EAAqB;AAACnB,MAAAA;AAAD,KAArB,EAA6B;AAC9B;AACA,YAAM;AAAEE,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAxB,CAF8B,CAG9B;;AACAoB,MAAAA,OAAO,CAACC,GAAR,CAAa,8BAA6BF,QAAQ,CAACF,MAAO,EAA1D,EAJ8B,CAK9B;AACA;;AACA,YAAMK,MAAM,GAAGvB,QAAQ,GAAGA,QAAQ,CAACe,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C,CAP8B,CAQ9B;;AACA,WAAK,IAAIS,CAAC,GAAGrB,IAAb,EAAmBqB,CAAC,GAAGrB,IAAI,GAAGiB,QAAQ,CAACF,MAAvC,EAA+C,EAAEM,CAAjD,EAAoD;AAChDD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYJ,QAAQ,CAAEI,CAAC,GAAGrB,IAAN,CAApB;AACH;;AAAA;AACDkB,MAAAA,OAAO,CAACC,GAAR,CAAY;AAACC,QAAAA;AAAD,OAAZ,EAZ8B,CAa9B;;AACA,aAAOA,MAAP;AAGH;;AA5DE,GAAP;AA8DH;AAAA","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\n\nexport default function paginationField() {\n    return {\n        keyArgs: false, // tells apollo we will take care of everything\n        read(existing = [], { args, cache }) {\n            // console.log({ existing, args, cache });\n            const { skip, first } = args;\n\n            // Read the number of items on the page from the cache\n            const data = cache.readQuery({ query: PAGINATION_QUERY });\n            const count = data?._allProductsMeta?.count;\n            const page = skip / first + 1;\n            const pages = Math.ceil(count / first);\n\n            // Check if we have existing items\n            const items = existing.slice(skip, skip + first).filter((x) => x);\n            // If\n            // There are items\n            // AND there aren't enough items to satisfy how many were requested\n            // AND we are on the last page\n            // THEN JUST SEND IT\n\n            if (items.length && items.length !== first && page === pages) {\n                return items;\n            }\n            if (items.length !== first) {\n                // We don't have any items, we must go to the network to fetch them\n                return false;\n            }\n\n            // If there are items, just reutrn them from the cache, and we don't need to go to the network\n            if (items.length) {\n                // console.log(\n                //   `There are ${items.length} items in the cache! Gonna send them to apollo`\n                // );\n                return items;\n            }\n\n            return false; // fallback to network\n\n            // First thing it does it asks the read function for those items.\n            // We can either do one of two things:\n            // First things we can do is return the items because they are already in the cache\n            // The other thing we can do is to return false from here, (network request)\n        },\n        merge(existing, incoming, {args}) {\n            //grab skip and first values\n            const { skip, first } = args;\n            // this runs when Apollo brings data back from the network request\n            console.log(`merging items from network ${incoming.length}`);\n            // console.log({incoming});\n            //if anything in the cache, merged is the existing, otherwise it's an empty array\n            const merged = existing ? existing.slice(0) : [];\n            //leave room for previous items, in case we are linked to a later page and the previous entries aren't in the cache\n            for (let i = skip; i > skip + incoming.length; ++i) {\n                merged[i] = incoming [i - skip]\n            };\n            console.log({merged});\n            //return merged itemd from cache, which automatically refires read fucntion\n            return merged;\n            \n            \n        }\n    };\n};"]},"metadata":{},"sourceType":"module"}