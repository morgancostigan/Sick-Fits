{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/components/UpdateProduct.js\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport Form from '../components/styles/Form';\nimport useForm from \"../lib/useForm\";\nimport DisplayError from './ErrorMessage';\nconst SINGLE_ITEM_QUERY = gql`\n    query SINGLE_ITEM_QUERY($id: ID!) {\n        Product (where: {\n            id: $id\n        }) \n        {\n            id\n            name\n            price\n            description\n            photo {\n                id\n                altText\n                image {\n                    publicUrlTransformed\n                }\n            }\n        }\n    }\n`;\nconst UPDATE_PRODUCT_MUTATION = gql`\n    mutation UPDATE_PRODUCT_MUTATION(\n        $id: ID!\n        $name: String\n        $description: String\n        $price: Int\n    ) {\n        updateProduct (\n            id: $id,\n            data: {\n                id: $id,\n                name: $name,\n                description: $description,\n                price: $price,\n            }\n        ) {\n            id\n            name\n            description\n            price\n        }\n    }\n`;\nexport default function UpdateProduct({\n  id\n}) {\n  //TODO\n  //get existing product\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SINGLE_ITEM_QUERY, {\n    variables: {\n      id\n    }\n  }); //mutation to update, including renaming res variables to not conflict with above\n\n  const [updateProduct, {\n    data: updateData,\n    error: updateError,\n    loading: updateLoading\n  }] = useMutation(UPDATE_PRODUCT_MUTATION, {\n    variables: {\n      id: id //TODO pass in updates\n\n    }\n  }); //create state for form inputs \n\n  const {\n    inputs,\n    handleChange,\n    clearForm,\n    resetForm\n  } = useForm(data.Product); //form to handle updates\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: async e => {\n      e.preventDefault(); //TODO handle submit\n      // // console.log({inputs});\n      // //submit input fields to backend\n      // const res = await createProduct();\n      // clearForm();\n      // //Go to the new product's page\n      // Router.push({\n      //     pathname: `/product/${res.data.createProduct.id}`,\n      // })\n    },\n    children: [/*#__PURE__*/_jsxDEV(DisplayError, {\n      error: error || updateError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      disabled: updateLoading,\n      \"aria-busy\": updateLoading,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: [\"Name It!\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          placeholder: \"Name\",\n          value: inputs.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"price\",\n        children: [\"Price It!\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"price\",\n          name: \"price\",\n          placeholder: \"Price\",\n          value: inputs.price,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: [\"Describe It!\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          name: \"description\",\n          placeholder: \"Description\",\n          value: inputs.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Bop It!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/components/UpdateProduct.js"],"names":["useMutation","useQuery","gql","Form","useForm","DisplayError","SINGLE_ITEM_QUERY","UPDATE_PRODUCT_MUTATION","UpdateProduct","id","data","error","loading","variables","updateProduct","updateData","updateError","updateLoading","inputs","handleChange","clearForm","resetForm","Product","e","preventDefault","name","price","description"],"mappings":"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","sourcesContent":["import { useMutation, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport Form from '../components/styles/Form';\nimport useForm from \"../lib/useForm\";\nimport DisplayError from './ErrorMessage';\n\nconst SINGLE_ITEM_QUERY = gql`\n    query SINGLE_ITEM_QUERY($id: ID!) {\n        Product (where: {\n            id: $id\n        }) \n        {\n            id\n            name\n            price\n            description\n            photo {\n                id\n                altText\n                image {\n                    publicUrlTransformed\n                }\n            }\n        }\n    }\n`;\n\nconst UPDATE_PRODUCT_MUTATION = gql`\n    mutation UPDATE_PRODUCT_MUTATION(\n        $id: ID!\n        $name: String\n        $description: String\n        $price: Int\n    ) {\n        updateProduct (\n            id: $id,\n            data: {\n                id: $id,\n                name: $name,\n                description: $description,\n                price: $price,\n            }\n        ) {\n            id\n            name\n            description\n            price\n        }\n    }\n`;\n \n\nexport default function UpdateProduct({id}) {\n\n    //TODO\n    //get existing product\n    const { data, error, loading } = useQuery(SINGLE_ITEM_QUERY, {\n        variables: {id},\n    });\n    \n    //mutation to update, including renaming res variables to not conflict with above\n    const [updateProduct, { \n        data: updateData, \n        error: updateError, \n        loading: updateLoading }] = \n        useMutation(UPDATE_PRODUCT_MUTATION, {\n            variables: {\n                id: id\n                //TODO pass in updates\n            }\n        })\n    //create state for form inputs \n    const { inputs, handleChange, clearForm, resetForm } = useForm(data.Product);\n    //form to handle updates\n\n    return (\n        <Form onSubmit={async (e) => {\n            e.preventDefault();\n\n            //TODO handle submit\n\n            // // console.log({inputs});\n            // //submit input fields to backend\n            // const res = await createProduct();\n            // clearForm();\n            // //Go to the new product's page\n            // Router.push({\n            //     pathname: `/product/${res.data.createProduct.id}`,\n            // })\n        }}>\n            <DisplayError error={error || updateError} />\n            <fieldset disabled={updateLoading} aria-busy={updateLoading}>\n\n                <label htmlFor=\"name\">\n                    Name It!\n                    <input\n                        type=\"text\"\n                        id=\"name\"\n                        name=\"name\"\n                        placeholder=\"Name\"\n                        value={inputs.name}\n                        onChange={handleChange}\n                    />\n                </label>\n                <label htmlFor=\"price\">\n                    Price It!\n                    <input\n                        type=\"number\"\n                        id=\"price\"\n                        name=\"price\"\n                        placeholder=\"Price\"\n                        value={inputs.price}\n                        onChange={handleChange}\n                    />\n                </label>\n                <label htmlFor=\"description\">\n                    Describe It!\n                    <textarea\n                        id=\"description\"\n                        name=\"description\"\n                        placeholder=\"Description\"\n                        value={inputs.description}\n                        onChange={handleChange}\n                    />\n                </label>\n                <label>\n                    Bop It!\n                </label>\n                <button type=\"submit\">Update Product</button>\n            </fieldset>\n\n            {/* //EXAMPLE methods */}\n            {/* <button type='button' onClick={clearForm}>\n                Clear Form\n            </button>\n            <button type='button' onClick={resetForm}>\n                Reset Form\n            </button> */}\n\n        </Form>\n    )\n}"]},"metadata":{},"sourceType":"module"}