{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n    //tells Apollo we will deal with this\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      //Apollo asks read function for allProducts\n      console.log({\n        existing: existing,\n        args: args,\n        cache: cache\n      });\n      var skip = args.skip,\n          first = args.first; //read # of items on page from cache\n\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      var count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      var page = skip / first + 1;\n      var pages = Math.ceil(count / first); // check if there are existing items in cache, and filter out undefined items\n\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      }); // If\n      // There are items\n      // AND there aren't enough items to satisfy how many were requested\n      // AND we are on the last page\n      // THEN JUST SEND IT\n\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n\n      if (items.length !== first) {\n        // We don't have any items, we must go to the network to fetch them\n        return false;\n      } // if both IFs don't work... fall back to network request\n\n\n      return false; //we can do 1 of 2 things...\n      // 1. return the items that are already in cache\n      // or 2. return 'false' triggering a network request for the items\n    },\n    merge: function merge(existing, incoming, _ref2) {\n      var args = _ref2.args;\n      //grab skip and first values\n      var skip = args.skip,\n          first = args.first; // this runs when Apollo brings data back from the network request\n\n      console.log(\"merging items from network \".concat(incoming.length)); // console.log({incoming});\n      //if anything in the cache, merged is the existing, otherwise it's an empty array\n\n      var merged = existing ? existing.slice(0) : []; //leave room for previous items, in case we are linked to a later page and the previous entries aren't in the cache\n\n      for (var i = skip; i > skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n\n      ;\n      console.log({\n        merged: merged\n      }); //return merged itemd from cache, which automatically refires read fucntion\n\n      return merged;\n    }\n  };\n}\n;","map":{"version":3,"sources":["/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","console","log","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge","incoming","merged","i"],"mappings":"AAAA,SAAQA,gBAAR,QAA+B,0BAA/B;AAEA,eAAe,SAASC,eAAT,GAA2B;AACtC,SAAO;AACHC,IAAAA,OAAO,EAAE,KADN;AACa;AAChBC,IAAAA,IAFG,kBAEiC;AAAA;;AAAA,UAA/BC,QAA+B,uEAArB,EAAqB;;AAAA;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;;AAChC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAACJ,QAAAA,QAAQ,EAARA,QAAD;AAAWC,QAAAA,IAAI,EAAJA,IAAX;AAAiBC,QAAAA,KAAK,EAALA;AAAjB,OAAZ;AAFgC,UAGxBG,IAHwB,GAGRJ,IAHQ,CAGxBI,IAHwB;AAAA,UAGlBC,KAHkB,GAGRL,IAHQ,CAGlBK,KAHkB,EAIhC;;AACA,UAAMC,IAAI,GAAGL,KAAK,CAACM,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEb;AAAT,OAAhB,CAAb;AACA,UAAMc,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CARgC,CAShC;;AACA,UAAMU,KAAK,GAAGhB,QAAQ,CAACiB,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0C,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAA1C,CAAd,CAVgC,CAWhC;AACA;AACA;AACA;AACA;;AAEA,UAAIH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBd,KAAjC,IAA0CM,IAAI,KAAKC,KAAvD,EAA8D;AAC1D,eAAOG,KAAP;AACH;;AACD,UAAIA,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AACxB;AACA,eAAO,KAAP;AACH,OAvB+B,CAwBhC;;;AACA,aAAO,KAAP,CAzBgC,CA4BhC;AACA;AACA;AACH,KAjCE;AAkCHe,IAAAA,KAlCG,iBAkCGrB,QAlCH,EAkCasB,QAlCb,SAkC+B;AAAA,UAAPrB,IAAO,SAAPA,IAAO;AAC9B;AAD8B,UAEtBI,IAFsB,GAENJ,IAFM,CAEtBI,IAFsB;AAAA,UAEhBC,KAFgB,GAENL,IAFM,CAEhBK,KAFgB,EAG9B;;AACAH,MAAAA,OAAO,CAACC,GAAR,sCAA0CkB,QAAQ,CAACF,MAAnD,GAJ8B,CAK9B;AACA;;AACA,UAAMG,MAAM,GAAGvB,QAAQ,GAAGA,QAAQ,CAACiB,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C,CAP8B,CAQ9B;;AACA,WAAK,IAAIO,CAAC,GAAGnB,IAAb,EAAmBmB,CAAC,GAAGnB,IAAI,GAAGiB,QAAQ,CAACF,MAAvC,EAA+C,EAAEI,CAAjD,EAAoD;AAChDD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAAEE,CAAC,GAAGnB,IAAN,CAApB;AACH;;AAAA;AACDF,MAAAA,OAAO,CAACC,GAAR,CAAY;AAACmB,QAAAA,MAAM,EAANA;AAAD,OAAZ,EAZ8B,CAa9B;;AACA,aAAOA,MAAP;AAGH;AAnDE,GAAP;AAqDH;AAAA","sourcesContent":["import {PAGINATION_QUERY} from '../components/Pagination';\n\nexport default function paginationField() {\n    return {\n        keyArgs: false, //tells Apollo we will deal with this\n        read(existing =[], { args, cache }) {\n            //Apollo asks read function for allProducts\n            console.log({existing, args, cache});\n            const { skip, first } = args;\n            //read # of items on page from cache\n            const data = cache.readQuery({ query: PAGINATION_QUERY });\n            const count = data?._allProductsMeta?.count;\n            const page = skip / first + 1;\n            const pages = Math.ceil(count / first);\n            // check if there are existing items in cache, and filter out undefined items\n            const items = existing.slice(skip, skip + first).filter((x) => x);\n            // If\n            // There are items\n            // AND there aren't enough items to satisfy how many were requested\n            // AND we are on the last page\n            // THEN JUST SEND IT\n\n            if (items.length && items.length !== first && page === pages) {\n                return items;\n            }\n            if (items.length !== first) {\n                // We don't have any items, we must go to the network to fetch them\n                return false;\n            }\n            // if both IFs don't work... fall back to network request\n            return false;\n            \n\n            //we can do 1 of 2 things...\n            // 1. return the items that are already in cache\n            // or 2. return 'false' triggering a network request for the items\n        },\n        merge(existing, incoming, {args}) {\n            //grab skip and first values\n            const { skip, first } = args;\n            // this runs when Apollo brings data back from the network request\n            console.log(`merging items from network ${incoming.length}`);\n            // console.log({incoming});\n            //if anything in the cache, merged is the existing, otherwise it's an empty array\n            const merged = existing ? existing.slice(0) : [];\n            //leave room for previous items, in case we are linked to a later page and the previous entries aren't in the cache\n            for (let i = skip; i > skip + incoming.length; ++i) {\n                merged[i] = incoming [i - skip]\n            };\n            console.log({merged});\n            //return merged itemd from cache, which automatically refires read fucntion\n            return merged;\n            \n            \n        }\n    };\n};"]},"metadata":{},"sourceType":"module"}