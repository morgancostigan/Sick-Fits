{"ast":null,"code":"import _regeneratorRuntime from \"/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/components/UpdateProduct.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UPDATE_PRODUCT_MUTATION(\\n        $id: ID!\\n        $name: String\\n        $description: String\\n        $price: Int\\n    ) {\\n        updateProduct (\\n            id: $id,\\n            data: {\\n                id: $id,\\n                name: $name,\\n                description: $description,\\n                price: $price,\\n            }\\n        ) {\\n            id\\n            name\\n            description\\n            price\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query SINGLE_ITEM_QUERY($id: ID!) {\\n        Product (where: {\\n            id: $id\\n        }) \\n        {\\n            id\\n            name\\n            price\\n            description\\n            photo {\\n                id\\n                altText\\n                image {\\n                    publicUrlTransformed\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport Form from '../components/styles/Form';\nimport useForm from \"../lib/useForm\";\nimport DisplayError from './ErrorMessage';\nvar SINGLE_ITEM_QUERY = gql(_templateObject());\nvar UPDATE_PRODUCT_MUTATION = gql(_templateObject2());\nexport default function UpdateProduct(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  //TODO\n  //get existing product\n  var _useQuery = useQuery(SINGLE_ITEM_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading; //mutation to update, including renaming res variables to not conflict with above\n\n\n  var _useMutation = useMutation(UPDATE_PRODUCT_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateProduct = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      updateData = _useMutation2$.data,\n      updateError = _useMutation2$.error,\n      updateLoading = _useMutation2$.loading; //create state for form inputs \n\n\n  var _useForm = useForm(data === null || data === void 0 ? void 0 : data.Product),\n      inputs = _useForm.inputs,\n      handleChange = _useForm.handleChange,\n      clearForm = _useForm.clearForm,\n      resetForm = _useForm.resetForm; // console.log(inputs);\n\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 25\n  }, this); //form to handle updates\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                res = updateProduct({\n                  variables: {\n                    id: id,\n                    data: inputs\n                  }\n                });\n                console.log({\n                  res: res\n                }); //TODO handle submit\n                // // console.log({inputs});\n                // //submit input fields to backend\n                // const res = await createProduct();\n                // clearForm();\n                // //Go to the new product's page\n                // Router.push({\n                //     pathname: `/product/${res.data.createProduct.id}`,\n                // })\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    children: [/*#__PURE__*/_jsxDEV(DisplayError, {\n      error: error || updateError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      disabled: updateLoading,\n      \"aria-busy\": updateLoading,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: [\"Name It!\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          placeholder: \"Name\",\n          value: data.Product.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"price\",\n        children: [\"Price It!\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"price\",\n          name: \"price\",\n          placeholder: \"Price\",\n          value: inputs.price,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: [\"Describe It!\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          name: \"description\",\n          placeholder: \"Description\",\n          value: inputs.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Bop It!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UpdateProduct, \"7L5GFEDS63RjTpYIYToJhl0buiQ=\", false, function () {\n  return [useQuery, useMutation, useForm];\n});\n\n_c = UpdateProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateProduct\");","map":{"version":3,"sources":["/Users/macbookpro/Documents/Tier-4/Advanced-React-master redux/sick-fits/frontend/components/UpdateProduct.js"],"names":["useMutation","useQuery","gql","Form","useForm","DisplayError","SINGLE_ITEM_QUERY","UPDATE_PRODUCT_MUTATION","UpdateProduct","id","variables","data","error","loading","updateProduct","updateData","updateError","updateLoading","Product","inputs","handleChange","clearForm","resetForm","e","preventDefault","res","console","log","name","price","description"],"mappings":"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","sourcesContent":["import { useMutation, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport Form from '../components/styles/Form';\nimport useForm from \"../lib/useForm\";\nimport DisplayError from './ErrorMessage';\n\nconst SINGLE_ITEM_QUERY = gql`\n    query SINGLE_ITEM_QUERY($id: ID!) {\n        Product (where: {\n            id: $id\n        }) \n        {\n            id\n            name\n            price\n            description\n            photo {\n                id\n                altText\n                image {\n                    publicUrlTransformed\n                }\n            }\n        }\n    }\n`;\n\nconst UPDATE_PRODUCT_MUTATION = gql`\n    mutation UPDATE_PRODUCT_MUTATION(\n        $id: ID!\n        $name: String\n        $description: String\n        $price: Int\n    ) {\n        updateProduct (\n            id: $id,\n            data: {\n                id: $id,\n                name: $name,\n                description: $description,\n                price: $price,\n            }\n        ) {\n            id\n            name\n            description\n            price\n        }\n    }\n`;\n \n\nexport default function UpdateProduct({id}) {\n\n    //TODO\n    //get existing product\n    const { data, error, loading } = useQuery(SINGLE_ITEM_QUERY, {\n        variables: {id},\n    });\n    \n    //mutation to update, including renaming res variables to not conflict with above\n    const [updateProduct, { \n        data: updateData, \n        error: updateError, \n        loading: updateLoading }] = \n        useMutation(UPDATE_PRODUCT_MUTATION);\n    //create state for form inputs \n    const { inputs, handleChange, clearForm, resetForm } = useForm(data?.Product);\n    // console.log(inputs);\n    \n    if (loading) return <p>Loading...</p>\n\n    //form to handle updates\n\n    return (\n        <Form onSubmit={async (e) => {\n            e.preventDefault();\n            const res = updateProduct({\n                variables: {\n                    id: id,\n                    data: inputs\n                }\n            });\n            console.log({res});\n            \n\n            //TODO handle submit\n\n            // // console.log({inputs});\n            // //submit input fields to backend\n            // const res = await createProduct();\n            // clearForm();\n            // //Go to the new product's page\n            // Router.push({\n            //     pathname: `/product/${res.data.createProduct.id}`,\n            // })\n        }}>\n            <DisplayError error={error || updateError} />\n            <fieldset disabled={updateLoading} aria-busy={updateLoading}>\n\n                <label htmlFor=\"name\">\n                    Name It!\n                    <input\n                        type=\"text\"\n                        id=\"name\"\n                        name=\"name\"\n                        placeholder=\"Name\"\n                        value={data.Product.name}\n                        onChange={handleChange}\n                    />\n                </label>\n                <label htmlFor=\"price\">\n                    Price It!\n                    <input\n                        type=\"number\"\n                        id=\"price\"\n                        name=\"price\"\n                        placeholder=\"Price\"\n                        value={inputs.price}\n                        onChange={handleChange}\n                    />\n                </label>\n                <label htmlFor=\"description\">\n                    Describe It!\n                    <textarea\n                        id=\"description\"\n                        name=\"description\"\n                        placeholder=\"Description\"\n                        value={inputs.description}\n                        onChange={handleChange}\n                    />\n                </label>\n                <label>\n                    Bop It!\n                </label>\n                <button type=\"submit\">Update Product</button>\n            </fieldset>\n\n            {/* //EXAMPLE methods */}\n            {/* <button type='button' onClick={clearForm}>\n                Clear Form\n            </button>\n            <button type='button' onClick={resetForm}>\n                Reset Form\n            </button> */}\n\n        </Form>\n    )\n}"]},"metadata":{},"sourceType":"module"}